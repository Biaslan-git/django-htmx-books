name: books-prod

services:
  web:
    # Берем Dockerfile из каталога app
    build: 
      context: app
      dockerfile: Dockerfile.prod
    # Запускаем тестовый сервер
    command: gunicorn django_htmx.wsgi:application --bind 0.0.0.0:8000
    # Открываем порт 8000 внутри и снаружи
    expose:
      - 8000:8000
    volumes:
      - static_volume:/home/app/web/static
      - media_volume:/home/app/web/media
    # Файл содержащий переменные для контейнера
    env_file:
      - .env.prod
    # Дожидаемся запуска контейнера db и memcached
    depends_on:
      - db
      - memcached

  db:
    # Берём образ БД PostgreSQL версии 15
    image: postgres:15
    # Примонтируем том postgres-data к директории /var/lib/postgresql/data контейнера db
    volumes:
      - postgres-data:/var/lib/postgresql/data
    # Файл содержащий переменные окружения для контейнера
    env_file:
      - .env
    # Используем значения переменных окружения из .env файла
    environment:
      - POSTGRES_USER=${SQL_USER}
      - POSTGRES_PASSWORD=${SQL_PASSWORD}
      - POSTGRES_DB=${SQL_DATABASE}

  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot/ --email django.ppp@gmail.com --agree-tos --no-eff-email -d test.biaslan.pro 
    depends_on:
      - nginx

  memcached:
    # Берём образ Мemcached версии 1.6.21
    image: memcached:1.6.21

  nginx:
    build: ./nginx
    # Подключаем статические и медиа файлы
    volumes:
      - static_volume:/home/app/web/static
      - media_volume:/home/app/web/media
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot

    ports:
      - 80:80
      - 443:443
    depends_on:
      - web

volumes:
  postgres-data:
  static_volume:
  media_volume:
